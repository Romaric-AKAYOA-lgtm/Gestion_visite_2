# utils.py (si vous souhaitez centraliser la logique)
from connection.models import ClConnection
# views.py
from django.shortcuts import render, redirect
from django.contrib import messages
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.hashers import make_password, check_password
from connection.forms import ClConnectionForm, LoginForm
from connection.models import ClConnection
from users.models import ClUser
from django.utils import timezone
from django.db.models import Q  
def get_connected_user(request):
    """Retourne l'utilisateur actuellement connect√© √† partir de la session."""
    username = request.session.get('username')
    if username:
        try:
            return ClConnection.objects.get(username=username)  # Retourne l'objet ClConnection
        except ClConnection.DoesNotExist:
            return None  # Si l'utilisateur n'existe pas, retourner None
    return None  # Si aucune session n'est active, retourner None


# Vue d'enregistrement (Inscription)
def register(request):
    # Obtenir la date actuelle
    current_date = timezone.now().date()

    # Filtrer les utilisateurs ayant une ddf None ou une ddf >= √† la date actuelle
    users = ClUser.objects.filter(Q(ddf__isnull=True) | Q(ddf__gte=current_date))
    username = get_connected_user(request)

    # Assurez-vous que le nom d'utilisateur est disponible dans la session
    if not username:
        return redirect('login')  # Redirige vers la page de connexion si pas de nom d'utilisateur dans la session

    """Vue pour l'enregistrement des nouveaux utilisateurs."""
    if request.method == 'POST':
        form = ClConnectionForm(request.POST)
        if form.is_valid():
            # Sauvegarde la nouvelle connexion
            form.save()
            messages.success(request, "Inscription r√©ussie. Vous pouvez maintenant vous connecter.")
            return redirect('connection:login')  # Redirection vers la page de connexion
        else:
            messages.error(request, "Erreur lors de l'inscription. Veuillez v√©rifier vos donn√©es.")
    else:
        form = ClConnectionForm()

    return render(request, 'connection/register.html', {'users':users,  'username':username,'form': form})

# Vue de d√©connexion (Logout)
def logout_view(request):
    """D√©connecte l'utilisateur et supprime toutes les donn√©es de session."""
    logout(request)  # Supprimer toutes les donn√©es de session
    messages.info(request, "Vous avez √©t√© d√©connect√© avec succ√®s.")
    return redirect("connection:login")  # Rediriger vers la page de connexion
from datetime import date

# Vue de connexion (Login)
def login_view(request):
    """Affiche la page de connexion et g√®re l'authentification des utilisateurs."""
    if request.method == 'POST':
        form = LoginForm(request.POST)

        if form.is_valid():
            username = form.cleaned_data['username']
            password = form.cleaned_data['password']

            # üîπ Essayer avec Django superuser
            user = authenticate(request, username=username, password=password)
            if user is not None:
                login(request, user)
                messages.success(request, "Connexion superutilisateur r√©ussie.")
                return redirect('home')

            # üîπ Sinon, essayer avec ClConnection
            try:
                user_obj = ClConnection.objects.get(username=username)

                # üîπ V√©rifier si le mot de passe est correct
                if check_password(password, user_obj.password):

                    # üîπ R√©cup√©rer l'utilisateur li√© (ClUser)
                    cl_user = user_obj.user

                    # üîπ V√©rification de retraite
                    if cl_user.date_retraite and date.today() >= cl_user.date_retraite:
                        messages.error(request, "Acc√®s refus√© : Vous √™tes √† la retraite.")
                        return redirect('connection:login')

                    # üîπ Connexion r√©ussie
                    request.session['username'] = user_obj.username
                    request.session['password'] = password
                    messages.success(request, "Connexion utilisateur ClConnection r√©ussie.")
                    return redirect('home')
                else:
                    messages.error(request, "Mot de passe incorrect pour l'utilisateur ClConnection.")
            except ClConnection.DoesNotExist:
                messages.error(request, "Aucun utilisateur trouv√© avec ce nom.")
        else:
            messages.error(request, "Veuillez v√©rifier les erreurs dans le formulaire.")
    else:
        form = LoginForm()

    return render(request, 'connection/login.html', {'form': form})

def manage_connection(request):
    """Vue pour g√©rer les informations de connexion de l'utilisateur."""
    user_obj = get_connected_user(request)  # R√©cup√©rer l'utilisateur connect√©

    if not user_obj:
        messages.error(request, "Vous devez √™tre connect√© pour acc√©der √† cette page.")
        return redirect('connection:login')  # Redirection si l'utilisateur n'est pas connect√©

    if request.method == 'POST':
        form = ClConnectionForm(request.POST, instance=user_obj)
        if form.is_valid():
            # Si un mot de passe a √©t√© modifi√©, le hacher avant de sauvegarder
            new_password = form.cleaned_data.get('password')
            if new_password and new_password != user_obj.password:
                form.instance.password = make_password(new_password)
            
            form.save()
            messages.success(request, "Vos informations ont √©t√© mises √† jour avec succ√®s.")
            return redirect('home')  # Redirection vers la page d'accueil apr√®s mise √† jour
        else:
            messages.error(request, "Erreur lors de la mise √† jour de vos informations.")
    else:
        form = ClConnectionForm(instance=user_obj)

    return render(request, 'connection/manage_connection.html', {'form': form})
